using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcrypto"], :libcrypto),
    LibraryProduct(prefix, ["libssl"], :libssl),
    ExecutableProduct(prefix, "openssl", :openssl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/OpenSSL-v1.1.1+c+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/OpenSSL.v1.1.1+c.aarch64-linux-gnu.tar.gz", "15cb636cebfa3cbb7939e6884ce7728d1104072cd18b6a3708132373566682dd"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/OpenSSL.v1.1.1+c.aarch64-linux-musl.tar.gz", "3ecc9896ba65463442f7e0c05159e7dd4f7fd9b935331be8169f71f29daf3705"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/OpenSSL.v1.1.1+c.arm-linux-gnueabihf.tar.gz", "b7b108c70c47fbd30656ecb022112e468d7fe517c85a20e83a1c15b5fc7e6bd0"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/OpenSSL.v1.1.1+c.arm-linux-musleabihf.tar.gz", "6f383cf037e6b3ef2bf9b2fa9d4ff6d2b54dbd3ec3655202f3b24322a3a573cb"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/OpenSSL.v1.1.1+c.i686-linux-gnu.tar.gz", "c739a47d0cf92d505288e22b57eb63db5bb5b3fd1f0f3488bd63e53eaad32f57"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/OpenSSL.v1.1.1+c.i686-linux-musl.tar.gz", "b8ab706e355e511b875df5b394db083d551243dc986e4e8ea3b44b62c794e071"),
    Windows(:i686) => ("$bin_prefix/OpenSSL.v1.1.1+c.i686-w64-mingw32.tar.gz", "089fb59f3bece1d621ab5c9cc821eee0c1c9639ea0660253b223a411db8d8b46"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/OpenSSL.v1.1.1+c.powerpc64le-linux-gnu.tar.gz", "debddeba54ece9d2b952eb850d7c372571f3a224bdc135515c6e91232475feaf"),
    MacOS(:x86_64) => ("$bin_prefix/OpenSSL.v1.1.1+c.x86_64-apple-darwin14.tar.gz", "96ad2aac89c596d4ca874ff3c7659ffdc3a867adc2e009295948f0f8599183bd"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/OpenSSL.v1.1.1+c.x86_64-linux-gnu.tar.gz", "4514ba75b1ad52387c0743ccaa7ab80e39fdff06dc9e4bc2de07b4b046a9c336"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/OpenSSL.v1.1.1+c.x86_64-linux-musl.tar.gz", "aa39a7aaaadc3d3695043e2727bc11c27f1cb731da5d88b9e4c9988f55634dcc"),
    FreeBSD(:x86_64) => ("$bin_prefix/OpenSSL.v1.1.1+c.x86_64-unknown-freebsd11.1.tar.gz", "9bc2b20b135b4dc4a53365af2f157103d36cf8190329e3cc2cf7dc2d3d311d49"),
    Windows(:x86_64) => ("$bin_prefix/OpenSSL.v1.1.1+c.x86_64-w64-mingw32.tar.gz", "55dab3d0507d4b28dcfeb158c3b821aff1f342c34726314cb1f7628569d86cc1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
